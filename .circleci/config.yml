version: 2.1

jobs:

  # Export the release
  download_release:
    docker:
      - image: rdclda/ci-export-release
    working_directory: ~/ci-workspace
    steps:
      # Checkout the repository
      - checkout

      # Create the release dir
      - run:
          name: Create release dir
          command: mkdir -p ./release

      # Download the release
      - run:
          name: Download the release to its defined release dir
          command: |
            download-release \
              --source=release-source.json \
              --manifest=release-manifest.json \
              --destination=./release

      # Copy the release manifest into the workspace
      - run:
          name: Bundle release manifest 
          command: cp ./release-manifest.json release/

      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory
          root: ~/ci-workspace
          # Must be relative path from root
          paths:
             - release/

  # Validate the release
  validate_release:
    docker:
      - image: rdclda/ci-export-release
    working_directory: ~/ci-workspace
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      # Retrieve the release
      - run:
          name: Validate the release
          command: |
            validate-release \
              --source=./release \
              --manifest=./release/release-manifest.json

  # Dockerize the release
  dockerize_release:
    docker:
      - image: rdclda/ci-export-release
    working_directory: ~/ci-workspace
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      # Retrieve the release
      - run:
          name: Dockerize the release
          command: |
            dockerize-release \
              --source=./release \
              --manifest=./release/release-manifest.json
 
  # Provision infrastructure
  provision_cloud_infra:
    parameters:
      - openshift_hosts:
        type: boolean
        default: true
      - channel_hosts:
        type: boolean
        default: true
      - backend_hosts:
        type: boolean
        default: true

    docker:
      - image: rdclda/ci-cloud-infra
    working_directory: ~/ci-workspace
    steps:
      # Checkout the repository for the infra manifest
      - checkout

      # Create the config infra dir
      - run:
          name: Create config data dir
          command: mkdir -p ./infra

      # Setup VPCs, networks, DNS, etc...
      - run:
          name: Instantiate cloud infrastructure
          command: |
            init-cloud-infra \
              --manifest=./infra-manifest.json \
              --config-data=./infra

      - when:
          condition: << parameters.openshift >>
          steps:
            # Setup OpenShift infrastructure
            - run:
                name: Instantiate OpenShift infrastructure
                command: |
                  init-openshift-infra \
                    --manifest=./infra-manifest.json \
                    --config-data=./infra

      - when:
          condition: << parameters.channel_middleware >>
          steps:
            # Setup Channel middleware infrastructure
            - run:
                name: Instantiate Channel middleware infrastructure
                command: |
                  init-channel-middleware-infra \
                    --manifest=./infra-manifest.json \
                    --config-data=./infra

      - when:
          condition: << parameters.backend_middleware >>
          steps:
            # Setup Backend middleware infrastructure
            - run:
                name: Instantiate Backend middleware infrastructure
                command: |
                  init-backend-middleware-infra \
                    --manifest=./infra-manifest.json \
                    --config-data=./infra

      # Copy the infra manifest into the workspace
      - run:
          name: Bundle infra manifest 
          command: cp ./infra-manifest.json infra/

      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory
          root: ~/ci-workspace
          # Must be relative path from root
          paths:
             - infra/

  # Provision OpenShift
  provision_openshift_middleware:
    parameters:
      - install:
        type: boolean
        default: true
    docker:
      - image: rdclda/ci-middleware-infra
    working_directory: ~/ci-workspace
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      - when:
          condition: << parameters.install >>
          steps:
            # Deploy the software
            - run:
                name: Deploy OpenShift
                command: |
                  deploy-openshift \
                    --manifest=./infra-manifest.json \
                    --config-data=./infra

  # Provision channel middleware
  provision_channel_middleware:
    parameters:
      - install:
        type: boolean
        default: true
    docker:
      - image: rdclda/ci-middleware-infra
    working_directory: ~/ci-workspace
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      - when:
          condition: << parameters.install >>
          steps:
            # Deploy the software
            - run:
                name: Deploy Channel Middleware
                command: |
                  deploy-channel-middleware \
                    --manifest=./infra-manifest.json \
                    --config-data=./infra

  # Provision backend middleware
  provision_backend_middleware:
    parameters:
      - install:
        type: boolean
        default: true
    docker:
      - image: rdclda/ci-middleware-infra
    working_directory: ~/ci-workspace
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      - when:
          condition: << parameters.install >>
          steps:
            # Deploy the software
            - run:
                name: Deploy backend Middleware
                command: |
                  deploy-backend-middleware \
                    --manifest=./infra-manifest.json \
                    --config-data=./infra

  # Provision Vault infrastructure
  vault_infra:
    parameters:
      install:
        type: boolean
        default: false
    docker:
      - image: rdclda/ci-vault-infra
    working_directory: ~/ci-workspace
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      - when:
          condition: << parameters.install >>
          steps:
            - run:
                name: Install and configure HashiCorp Vault infrastructure
                command: |
                  vault-install \
                    --manifest=./infra/infra-manifest.json \
                    --config-data=./infra

  # Provision LogDNA infrastructure
  logdna_infra:
    parameters:
      install:
        type: boolean
        default: false
    docker:
      - image: rdclda/ci-logdna-infra
    working_directory: ~/ci-workspace
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      - when:
          condition: << parameters.install >>
          steps:
            - run:
                name: Configure LogDNA infrastructure
                command: |
                  logdna-install \
                    --manifest=./infra/infra-manifest.json \
                    --config-data=./infra

  # Provision DataDog infrastructure
  datadog_infra:
    parameters:
      install:
        type: boolean
        default: false
    docker:
      - image: rdclda/ci-datadog-infra
    working_directory: ~/ci-workspace
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      - when:
          condition: << parameters.install >>
          steps:
            - run:
                name: Configure DataDog infrastructure
                command: |
                  datadog-install \
                    --manifest=./infra/infra-manifest.json \
                    --config-data=./infra

  # Provision SysDig infrastructure
  sysdig_infra:
    parameters:
      install:
        type: boolean
        default: false
    docker:
      - image: rdclda/ci-sysdig-infra
    working_directory: ~/ci-workspace
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      - when:
          condition: << parameters.install >>
          steps:
            - run:
                name: Configure SysDig infrastructure
                command: |
                  sysdig-install \
                    --manifest=./infra/infra-manifest.json \
                    --config-data=./infra

  # Deploy release
  deploy_release:
    docker:
      - image: rdclda/ci-deploy-release
    working_directory: ~/ci-workspace
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      # Retrieve the release
      - run:
          name: Deploy the release
          command: |
            deploy-release \
              --source=./release \
              --manifest=./release/release-manifest.json  

# Glue the jobs together
workflows:
  version: 2
  build:
    jobs:
      # 
      # Compose release
      - download_release
      - validate_release:
          requires:
            - download_release
      - dockerize_release:
          requires:
            - validate_release
      # 
      # Cloud infra setup      
      - provision_cloud_infra:
          openshift_hosts: true
          channel_hosts: true
          backend_hosts: true
      # 
      # Middleware deployments
      - provision_openshift_middleware:
          install: true
          requires: 
            - provision_cloud_infra
      - provision_channel_middleware:
          install: true
          requires: 
            - provision_cloud_infra
      - provision_backend_middleware:
          install: true
          requires: 
            - provision_cloud_infra
      # 
      # Additional service deployments
      - provision_vault:
          install: false
          requires:
            - provision_cloud_infra
            - provision_openshift
      # 
      # Monitoring deployments
      - provision_logdna:
          install: false
          requires:
            - provision_cloud_infra
            - provision_openshift
      - provision_datadog:
          install: false
          requires:
            - provision_cloud_infra
            - provision_openshift
            - provision_channel_middleware
            - provision_backend_middleware
      - provision_sysdig:
          install: false
          requires:
            - provision_cloud_infra
            - provision_openshift
      # 
      # Monitoring deployments
      - deploy_release:
          requires:
            - provision_openshift