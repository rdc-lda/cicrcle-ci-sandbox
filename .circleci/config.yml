version: 2.1

jobs:

  # Export the release
  download_release:
    docker:
      - image: rdclda/ci-export-release
    working_directory: ~/ci-workspace
    steps:
      # Checkout the repository
      - checkout

      # Create the release dir
      - run:
          name: Create release dir
          command: mkdir -p ./release

      # Download the release
      - run:
          name: Download the release to its defined release dir
          command: |
            download-release \
              --source=release-source.json \
              --manifest=release-manifest.json \
              --destination=./release

      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory
          root: ~/ci-workspace
          # Must be relative path from root
          paths:
             - release/

  # Validate the release
  validate_release:
    docker:
      - image: rdclda/ci-export-release
    working_directory: ~/ci-workspace
    steps:
      # Checkout the repository
      - checkout
      
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      # Retrieve the release
      - run:
          name: Validate the release
          command: |
            validate-release \
              --source=./release \
              --manifest=./release-manifest.json

  # Dockerize the release
  dockerize_release:
    docker:
      - image: rdclda/ci-docker-build
    working_directory: ~/ci-workspace
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace
      
      # Enable external Docker engine 
      - setup_remote_docker  
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true

      # Build the images(s)
      - run:
          name: Dockerize the release
          command: |
            dockerize-release \
              --source=./release \
              --manifest=./release/release-manifest.json
 
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar

      # - deploy:
      #     name: Push application Docker image
      #     command: |
      #       if [ "${CIRCLE_BRANCH}" == "master" ]; then
      #         login="$(aws ecr get-login)"
      #         ${login}
      #         docker tag app "${ECR_ENDPOINT}/app:${CIRCLE_SHA1}"
      #         docker push "${ECR_ENDPOINT}/app:${CIRCLE_SHA1}"
      #       fi


  # Init cloud infrastructure
  init_cloud_infra:
    docker:
      - image: rdclda/ci-cloud-infra
    working_directory: ~/ci-workspace
    steps:
      # Checkout the repository for the infra manifest
      - checkout

      # Create the config infra dir
      - run:
          name:  Create infra config dir
          command: mkdir -p ./infra

      # Setup VPCs, networks, security groups, etc...
      # - run:
      #     name: Init cloud infrastructure
      #     command: |
      #       cloud-infra \
      #         --manifest=./infra-manifest.json \
      #         --config-data=./infra \
      #         --action=init

      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory
          root: ~/ci-workspace
          # Must be relative path from root
          paths:
             - infra/

  # Init Openshift infrastructure
  init_openshift_infra:
    docker:
      - image: rdclda/ci-cloud-infra
    working_directory: ~/ci-workspace
    steps:
      # Checkout the repository for the infra manifest
      - checkout

      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      - run:
          name: Create OpenShift config dir
          command: mkdir -p ./infra/openshift

      # Setup master, infra, worker nodes, DNS, load balancers, etc...
      # - run:
      #     name: Init OpenShift infrastructure
      #     command: |
      #       openshift-infra \
      #         --manifest=./infra-manifest.json \
      #         --config-data=./infra \
      #         --action=init

      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory
          root: ~/ci-workspace
          # Must be relative path from root
          paths:
             - infra/openshift

  # Init channel middleware infrastructure
  init_channel_mw_infra:
    docker:
      - image: rdclda/ci-cloud-infra
    working_directory: ~/ci-workspace
    steps:
      # Checkout the repository for the infra manifest
      - checkout

      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace
      
      - run:
          name: Create channel middleware config dir
          command: mkdir -p ./infra/channel-middleware

      # Setup machines, volumes, security groups, DNS, etc...
      # - run:
      #     name: Init channel middleware infrastructure
      #     command: |
      #       channel-middleware-infra \
      #         --manifest=./infra-manifest.json \
      #         --config-data=./infra \
      #         --action=init

      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory
          root: ~/ci-workspace
          # Must be relative path from root
          paths:
             - infra/channel-middleware

  # Init backend middleware infrastructure
  init_backend_mw_infra:
    docker:
      - image: rdclda/ci-cloud-infra
    working_directory: ~/ci-workspace
    steps:
      # Checkout the repository for the infra manifest
      - checkout

      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      - run:
          name: Create backend middleware config dir
          command: mkdir -p ./infra/backend-middleware

      # Setup machines, volumes, security groups, DNS, etc...
      # - run:
      #     name: Init backend middleware infrastructure
      #     command: |
      #       backend-middleware-infra \
      #         --manifest=./infra-manifest.json \
      #         --config-data=./infra \
      #         --action=init

      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory
          root: ~/ci-workspace
          # Must be relative path from root
          paths:
             - infra/backend-middleware

  # Init backend middleware infrastructure
  init_dmz_infra:
    docker:
      - image: rdclda/ci-cloud-infra
    working_directory: ~/ci-workspace
    steps:
      # Checkout the repository for the infra manifest
      - checkout

      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      - run:
          name: Create backend middleware config dir
          command: mkdir -p ./infra/dmz

      # Setup machines, volumes, security groups, DNS, etc...
      - run:
          name: Init DMZ infrastructure
          command: |
            dmz-infra \
              --manifest=./infra-manifest.json \
              --config-data=./infra \
              --action=init

      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory
          root: ~/ci-workspace
          # Must be relative path from root
          paths:
             - infra/dmz


  # Destroy cloud infrastructure
  destroy_cloud_infra:
    docker:
      - image: rdclda/ci-cloud-infra
    working_directory: ~/ci-workspace
    steps:
      # Checkout the repository
      - checkout

      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      # Destroy VPCs, networks, DNS, etc...
      - run:
          name: Destroy cloud infrastructure
          command: |
            cloud-infra \
              --manifest=./infra-manifest.json \
              --config-data=./infra \
              --action=destroy

  # Destroy Openshift infrastructure
  destroy_openshift_infra:
    docker:
      - image: rdclda/ci-cloud-infra
    working_directory: ~/ci-workspace
    steps:
      # Checkout the repository for the infra manifest
      - checkout

      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      # Destroy master, infra, worker nodes, DNS, load balancers, etc...
      - run:
          name: Destroy OpenShift infrastructure
          command: |
            openshift-infra \
              --manifest=./infra-manifest.json \
              --config-data=./infra \
              --action=destroy

  # Destroy channel middleware infrastructure
  destroy_channel_mw_infra:
    docker:
      - image: rdclda/ci-cloud-infra
    working_directory: ~/ci-workspace
    steps:
      # Checkout the repository for the infra manifest
      - checkout

      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace
      
      # Destroy machines, volumes, security groups, DNS, etc...
      - run:
          name: Destroy channel middleware infrastructure
          command: |
            channel-middleware-infra \
              --manifest=./infra-manifest.json \
              --config-data=./infra \
              --action=init

  # Destroy backend middleware infrastructure
  destroy_backend_mw_infra:
    docker:
      - image: rdclda/ci-cloud-infra
    working_directory: ~/ci-workspace
    steps:
      # Checkout the repository for the infra manifest
      - checkout

      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      # Destroy machines, volumes, security groups, DNS, etc...
      - run:
          name: Destroy backend middleware infrastructure
          command: |
            backend-middleware-infra \
              --manifest=./infra-manifest.json \
              --config-data=./infra \
              --action=destroy

# Destroy DMZ infrastructure
  destroy_dmz_infra:
    docker:
      - image: rdclda/ci-cloud-infra
    working_directory: ~/ci-workspace
    steps:
      # Checkout the repository for the infra manifest
      - checkout

      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      # Destroy machines, volumes, security groups, DNS, etc...
      - run:
          name: Destroy DMZ infrastructure
          command: |
            dmz-infra \
              --manifest=./infra-manifest.json \
              --config-data=./infra \
              --action=destroy


  # Provision OpenShift
  provision_openshift:
    parameters:
      install:
        type: boolean
        default: true
    docker:
      - image: rdclda/ci-provision-middleware
    working_directory: ~/ci-workspace
    steps:
      # Checkout the repository for the infra manifest
      - checkout

      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      - run:
          name: Create OpenShift provision dir
          command: mkdir -p ./provision/openshift

      - when:
          condition: << parameters.install >>
          steps:
            # Provision the software
            - run:
                name: Provision OpenShift
                command: |
                  deploy-openshift \
                    --manifest=./infra-manifest.json \
                    --config-data=./infra \
                    --provision-data=./provision/openshift

      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory
          root: ~/ci-workspace
          # Must be relative path from root
          paths:
             - provision/openshift

  # Provision Elasticsearch
  provision_elasticsearch:
    parameters:
      install:
        type: boolean
        default: true
    docker:
      - image: rdclda/ci-provision-middleware
    working_directory: ~/ci-workspace
    steps:
      # Checkout the repository for the infra manifest
      - checkout
      
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      - run:
          name: Create Elasticsearch provision dir
          command: mkdir -p ./provision/elasticsearch

      # - when:
      #     condition: << parameters.install >>
      #     steps:
      #       # Provision the software
      #       - run:
      #           name: Provision Elasticsearch
      #           command: |
      #             deploy-elasticsearch \
      #               --manifest=./infra-manifest.json \
      #               --config-data=./infra \
      #               --provision-data=./provision/elasticsearch

      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory
          root: ~/ci-workspace
          # Must be relative path from root
          paths:
             - provision/elasticsearch

  # Provision Elasticsearch
  provision_redis:
    parameters:
      install:
        type: boolean
        default: true
    docker:
      - image: rdclda/ci-provision-middleware
    working_directory: ~/ci-workspace
    steps:
      # Checkout the repository for the infra manifest
      - checkout
      
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      - run:
          name: Create Redis provision dir
          command: mkdir -p ./provision/redis

      # - when:
      #     condition: << parameters.install >>
      #     steps:
      #       # Provision the software
      #       - run:
      #           name: Provision Redis
      #           command: |
      #             deploy-redis \
      #               --manifest=./infra-manifest.json \
      #               --config-data=./infra \
      #               --provision-data=./provision/redis

      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory
          root: ~/ci-workspace
          # Must be relative path from root
          paths:
             - provision/redis

  # Provision RabbitMQ
  provision_rabbitmq:
    parameters:
      install:
        type: boolean
        default: true
    docker:
      - image: rdclda/ci-provision-middleware
    working_directory: ~/ci-workspace
    steps:
      # Checkout the repository for the infra manifest
      - checkout
      
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      - run:
          name: Create RabbitMQ provision dir
          command: mkdir -p ./provision/rabbitmq

      # - when:
      #     condition: << parameters.install >>
      #     steps:
      #       # Provision the software
      #       - run:
      #           name: Provision RabbitMQ
      #           command: |
      #             deploy-rabbitmq \
      #               --manifest=./infra-manifest.json \
      #               --config-data=./infra \
      #               --provision-data=./provision/rabbitmq

      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory
          root: ~/ci-workspace
          # Must be relative path from root
          paths:
             - provision/rabbitmq

  # Provision Kafka / Zookeeper
  provision_kafka:
    parameters:
      install:
        type: boolean
        default: true
    docker:
      - image: rdclda/ci-provision-middleware
    working_directory: ~/ci-workspace
    steps:
      # Checkout the repository for the infra manifest
      - checkout
      
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      - run:
          name: Create Kafka provision dir
          command: mkdir -p ./provision/kafka

      # - when:
      #     condition: << parameters.install >>
      #     steps:
      #       # Provision the software
      #       - run:
      #           name: Provision Kafka
      #           command: |
      #             deploy-kafka \
      #               --manifest=./infra-manifest.json \
      #               --config-data=./infra \
      #               --provision-data=./provision/kafka

      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory
          root: ~/ci-workspace
          # Must be relative path from root
          paths:
             - provision/kafka

  # Provision Striim
  provision_striim:
    parameters:
      install:
        type: boolean
        default: true
    docker:
      - image: rdclda/ci-provision-middleware
    working_directory: ~/ci-workspace
    steps:
      # Checkout the repository for the infra manifest
      - checkout
      
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      - run:
          name: Create Striim provision dir
          command: mkdir -p ./provision/striim

      # - when:
      #     condition: << parameters.install >>
      #     steps:
      #       # Provision the software
      #       - run:
      #           name: Provision Striim
      #           command: |
      #             deploy-striim \
      #               --manifest=./infra-manifest.json \
      #               --config-data=./infra \
      #               --provision-data=./provision/striim

      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory
          root: ~/ci-workspace
          # Must be relative path from root
          paths:
             - provision/striim

  # Provision FileStore
  provision_filestore:
    parameters:
      install:
        type: boolean
        default: true
    docker:
      - image: rdclda/ci-provision-middleware
    working_directory: ~/ci-workspace
    steps:
      # Checkout the repository for the infra manifest
      - checkout
      
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      - run:
          name: Create FileStore provision dir
          command: mkdir -p ./provision/filestore

      # - when:
      #     condition: << parameters.install >>
      #     steps:
      #       # Provision the software
      #       - run:
      #           name: Provision FileStore (S3 Minion)
      #           command: |
      #             deploy-filestore \
      #               --manifest=./infra-manifest.json \
      #               --config-data=./infra \
      #               --provision-data=./provision/filestore

      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory
          root: ~/ci-workspace
          # Must be relative path from root
          paths:
             - provision/filestore

  # Provision Git
  provision_git:
    parameters:
      install:
        type: boolean
        default: true
    docker:
      - image: rdclda/ci-provision-middleware
    working_directory: ~/ci-workspace
    steps:
      # Checkout the repository for the infra manifest
      - checkout
      
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      - run:
          name: Create Git provision dir
          command: mkdir -p ./provision/git

      # - when:
      #     condition: << parameters.install >>
      #     steps:
      #       # Provision the software
      #       - run:
      #           name: Provision Git
      #           command: |
      #             deploy-git \
      #               --manifest=./infra-manifest.json \
      #               --config-data=./infra \
      #               --provision-data=./provision/git

      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory
          root: ~/ci-workspace
          # Must be relative path from root
          paths:
             - provision/git

  # Provision Vault service
  provision_vault_service:
    parameters:
      install:
        type: boolean
        default: false
    docker:
      - image: rdclda/ci-vault-infra
    working_directory: ~/ci-workspace
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      - when:
          condition: << parameters.install >>
          steps:
            - run:
                name: Install and configure HashiCorp Vault infrastructure
                command: |
                  vault-install \
                    --manifest=./infra/infra-manifest.json \
                    --config-data=./infra

  # Provision LogDNA infrastructure
  provision_logdna_monitor:
    parameters:
      install:
        type: boolean
        default: false
    docker:
      - image: rdclda/ci-logdna-infra
    working_directory: ~/ci-workspace
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      - when:
          condition: << parameters.install >>
          steps:
            - run:
                name: Configure LogDNA infrastructure
                command: |
                  logdna-install \
                    --manifest=./infra/infra-manifest.json \
                    --config-data=./infra

  # Provision DataDog infrastructure
  provision_datadog_monitor:
    parameters:
      install:
        type: boolean
        default: false
    docker:
      - image: rdclda/ci-datadog-infra
    working_directory: ~/ci-workspace
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      - when:
          condition: << parameters.install >>
          steps:
            - run:
                name: Configure DataDog infrastructure
                command: |
                  datadog-install \
                    --manifest=./infra/infra-manifest.json \
                    --config-data=./infra

  # Provision SysDig infrastructure
  provision_sysdig_monitor:
    parameters:
      install:
        type: boolean
        default: false
    docker:
      - image: rdclda/ci-sysdig-infra
    working_directory: ~/ci-workspace
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      - when:
          condition: << parameters.install >>
          steps:
            - run:
                name: Configure SysDig infrastructure
                command: |
                  sysdig-install \
                    --manifest=./infra/infra-manifest.json \
                    --config-data=./infra


  # Deploy release
  deploy_release:
    docker:
      - image: rdclda/ci-deploy-release
    working_directory: ~/ci-workspace
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/ci-workspace

      # Retrieve the release
      - run:
          name: Deploy the release
          command: |
            deploy-release \
              --source=./release \
              --manifest=./release/release-manifest.json  

# Glue the jobs together
workflows:
  version: 2
  compose-provision-test-release:
    jobs:
      # 
      # Compose release
      # - download_release
      # - validate_release:
      #     requires:
      #       - download_release
      # 
      # Deploy Cloud infra      
      - init_cloud_infra
          # requires:
          #   - validate_release
      - init_openshift_infra:
          requires:
            - init_cloud_infra
      - init_channel_mw_infra:
          requires:
            - init_cloud_infra
      - init_backend_mw_infra:
          requires:
            - init_cloud_infra
      - init_dmz_infra:
          requires:
            - init_cloud_infra
      # 
      # Deploy middleware deployments
      - provision_openshift:
          install: true
          requires: 
            - init_openshift_infra
      - provision_elasticsearch:
          install: true
          requires: 
            - init_channel_mw_infra
      - provision_redis:
          install: true
          requires: 
            - init_channel_mw_infra
      - provision_rabbitmq:
          install: true
          requires: 
            - init_channel_mw_infra
      - provision_kafka:
          install: true
          requires: 
            - init_channel_mw_infra
      - provision_striim:
          install: true
          requires: 
            - init_channel_mw_infra
      - provision_filestore:
          install: true
          requires: 
            - init_channel_mw_infra
      - provision_git:
          install: true
          requires: 
            - init_channel_mw_infra  
      # - provision_channel_middleware:
      #     install: true
      #     requires: 
      #       - provision_cloud_infra
      # - provision_backend_middleware:
      #     install: true
      #     requires: 
      #       - provision_cloud_infra
      # # 
      # # Deploy additional service components
      # - provision_vault_service:
      #     install: false
      #     requires:
      #       - provision_cloud_infra
      #       - provision_openshift_middleware
      # # 
      # # Deploy monitoring components
      # - provision_logdna_monitor:
      #     install: false
      #     requires:
      #       - provision_cloud_infra
      #       - provision_openshift_middleware
      # - provision_datadog_monitor:
      #     install: false
      #     requires:
      #       - provision_cloud_infra
      #       - provision_openshift_middleware
      #       - provision_channel_middleware
      #       - provision_backend_middleware
      # - provision_sysdig_monitor:
      #     install: false
      #     requires:
      #       - provision_cloud_infra
      #       - provision_openshift_middleware
      # # 
      # # Application deployments
      # - dockerize_release:
      #     requires:
      #       - provision_openshift_middleware
      # - deploy_release:
      #     requires:
      #       - dockerize_release
      #       - provision_vault_service
      - request_destroy:
          type: approval
          requires:
            - provision_openshift
            - provision_elasticsearch
            - provision_redis
            - provision_rabbitmq
            - provision_kafka
            - provision_striim
            - provision_filestore
            - provision_git
            - init_backend_mw_infra
            - init_dmz_infra
      - destroy_openshift_infra:
          requires:
            - request_destroy
      - destroy_channel_mw_infra:
          requires:
            - request_destroy
      - destroy_backend_mw_infra:
          requires:
            - request_destroy
      - destroy_dmz_infra:
          requires:
            - request_destroy
      - destroy_cloud_infra:
          requires:
            - destroy_openshift_infra
            - destroy_channel_mw_infra
            - destroy_backend_mw_infra
            - destroy_dmz_infra